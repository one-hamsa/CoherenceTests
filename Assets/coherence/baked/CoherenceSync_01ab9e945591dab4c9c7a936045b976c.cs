// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using UnityEngine;
    using Coherence.Toolkit;
    using Coherence.Toolkit.Bindings;
    using Coherence.Entities;
    using Coherence.ProtocolDef;
    using Coherence.Brook;
    using Coherence.Toolkit.Bindings.ValueBindings;
    using Coherence.Toolkit.Bindings.TransformBindings;
    using Coherence.Connection;
    using Coherence.SimulationFrame;
    using Coherence.Interpolation;
    using Coherence.Log;
    using Logger = Coherence.Log.Logger;
    using UnityEngine.Scripting;
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_afdd95ed2f444dd2b1be1ac8dfcbd925 : PositionBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override string CoherenceComponentName => "WorldPosition";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(coherenceSync.coherencePosition); }
            set { coherenceSync.coherencePosition = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldPosition)coherenceComponent).value;
            if (!coherenceSync.HasParentWithCoherenceSync) { value += floatingOriginDelta; }

            var simFrame = ((WorldPosition)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldPosition)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldPosition();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_6393046b690e49918ab1c810c63f78b6 : RotationBinding
    {   
        private global::UnityEngine.Transform CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::UnityEngine.Transform)UnityComponent;
        }

        public override string CoherenceComponentName => "WorldOrientation";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override UnityEngine.Quaternion Value
        {
            get { return (UnityEngine.Quaternion)(coherenceSync.coherenceRotation); }
            set { coherenceSync.coherenceRotation = (UnityEngine.Quaternion)(value); }
        }

        protected override (UnityEngine.Quaternion value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((WorldOrientation)coherenceComponent).value;

            var simFrame = ((WorldOrientation)coherenceComponent).valueSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (WorldOrientation)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.value = Value;
            }
            else
            {
                update.value = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.valueSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new WorldOrientation();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_d24f7942547649f0aafed1df15b2aca7 : BoolBinding
    {   
        private global::MechSyncState CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::MechSyncState)UnityComponent;
        }

        public override string CoherenceComponentName => "_01ab9e945591dab4c9c7a936045b976c_8021727627539323238";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override System.Boolean Value
        {
            get { return (System.Boolean)(CastedUnityComponent.blah); }
            set { CastedUnityComponent.blah = (System.Boolean)(value); }
        }

        protected override (System.Boolean value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_01ab9e945591dab4c9c7a936045b976c_8021727627539323238)coherenceComponent).blah;

            var simFrame = ((_01ab9e945591dab4c9c7a936045b976c_8021727627539323238)coherenceComponent).blahSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_01ab9e945591dab4c9c7a936045b976c_8021727627539323238)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.blah = Value;
            }
            else
            {
                update.blah = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.blahSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _01ab9e945591dab4c9c7a936045b976c_8021727627539323238();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_dc394eab71eb48f9a69fe44b8df69e2a : Vector3Binding
    {   
        private global::MechSyncState CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::MechSyncState)UnityComponent;
        }

        public override string CoherenceComponentName => "_01ab9e945591dab4c9c7a936045b976c_8021727627539323238";
        public override uint FieldMask => 0b00000000000000000000000000000010;

        public override UnityEngine.Vector3 Value
        {
            get { return (UnityEngine.Vector3)(CastedUnityComponent.stam); }
            set { CastedUnityComponent.stam = (UnityEngine.Vector3)(value); }
        }

        protected override (UnityEngine.Vector3 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_01ab9e945591dab4c9c7a936045b976c_8021727627539323238)coherenceComponent).stam;

            var simFrame = ((_01ab9e945591dab4c9c7a936045b976c_8021727627539323238)coherenceComponent).stamSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_01ab9e945591dab4c9c7a936045b976c_8021727627539323238)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.stam = Value;
            }
            else
            {
                update.stam = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.stamSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _01ab9e945591dab4c9c7a936045b976c_8021727627539323238();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_722ce86ef3e7469dbd7e66130cc3e0d3 : IntBinding
    {   
        private global::Player CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Player)UnityComponent;
        }

        public override string CoherenceComponentName => "_01ab9e945591dab4c9c7a936045b976c_8549624382963648638";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override System.Int32 Value
        {
            get { return (System.Int32)(CastedUnityComponent.leftArmItemID); }
            set { CastedUnityComponent.leftArmItemID = (System.Int32)(value); }
        }

        protected override (System.Int32 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).leftArmItemID;

            var simFrame = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).leftArmItemIDSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.leftArmItemID = Value;
            }
            else
            {
                update.leftArmItemID = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.leftArmItemIDSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _01ab9e945591dab4c9c7a936045b976c_8549624382963648638();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_9e6de6cd0d8d43008ed392577ac75be5 : IntBinding
    {   
        private global::Player CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Player)UnityComponent;
        }

        public override string CoherenceComponentName => "_01ab9e945591dab4c9c7a936045b976c_8549624382963648638";
        public override uint FieldMask => 0b00000000000000000000000000000010;

        public override System.Int32 Value
        {
            get { return (System.Int32)(CastedUnityComponent.rightArmItemID); }
            set { CastedUnityComponent.rightArmItemID = (System.Int32)(value); }
        }

        protected override (System.Int32 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).rightArmItemID;

            var simFrame = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).rightArmItemIDSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.rightArmItemID = Value;
            }
            else
            {
                update.rightArmItemID = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.rightArmItemIDSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _01ab9e945591dab4c9c7a936045b976c_8549624382963648638();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_85caa4b2a51c4a9bac671f1306cf2738 : IntBinding
    {   
        private global::Player CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Player)UnityComponent;
        }

        public override string CoherenceComponentName => "_01ab9e945591dab4c9c7a936045b976c_8549624382963648638";
        public override uint FieldMask => 0b00000000000000000000000000000100;

        public override System.Int32 Value
        {
            get { return (System.Int32)(CastedUnityComponent.leftWeaponItemID); }
            set { CastedUnityComponent.leftWeaponItemID = (System.Int32)(value); }
        }

        protected override (System.Int32 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).leftWeaponItemID;

            var simFrame = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).leftWeaponItemIDSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.leftWeaponItemID = Value;
            }
            else
            {
                update.leftWeaponItemID = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.leftWeaponItemIDSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _01ab9e945591dab4c9c7a936045b976c_8549624382963648638();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_e2f04692a9f9469ab828cb063e9130f9 : IntBinding
    {   
        private global::Player CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Player)UnityComponent;
        }

        public override string CoherenceComponentName => "_01ab9e945591dab4c9c7a936045b976c_8549624382963648638";
        public override uint FieldMask => 0b00000000000000000000000000001000;

        public override System.Int32 Value
        {
            get { return (System.Int32)(CastedUnityComponent.rightWeaponItemID); }
            set { CastedUnityComponent.rightWeaponItemID = (System.Int32)(value); }
        }

        protected override (System.Int32 value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).rightWeaponItemID;

            var simFrame = ((_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent).rightWeaponItemIDSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_01ab9e945591dab4c9c7a936045b976c_8549624382963648638)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.rightWeaponItemID = Value;
            }
            else
            {
                update.rightWeaponItemID = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.rightWeaponItemIDSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _01ab9e945591dab4c9c7a936045b976c_8549624382963648638();
        }    
    }
    
    [UnityEngine.Scripting.Preserve]
    public class Binding_01ab9e945591dab4c9c7a936045b976c_099ed962adea4cf99b72d60281f876b8 : ByteArrayBinding
    {   
        private global::Coherence.Toolkit.PrefabSyncGroup CastedUnityComponent;

        protected override void OnBindingCloned()
        {
    	    CastedUnityComponent = (global::Coherence.Toolkit.PrefabSyncGroup)UnityComponent;
        }

        public override string CoherenceComponentName => "_01ab9e945591dab4c9c7a936045b976c_2272714898920472812";
        public override uint FieldMask => 0b00000000000000000000000000000001;

        public override System.Byte[] Value
        {
            get { return (System.Byte[])(CastedUnityComponent.ids); }
            set { CastedUnityComponent.ids = (System.Byte[])(value); }
        }

        protected override (System.Byte[] value, AbsoluteSimulationFrame simFrame) ReadComponentData(ICoherenceComponentData coherenceComponent, Vector3 floatingOriginDelta)
        {
            var value = ((_01ab9e945591dab4c9c7a936045b976c_2272714898920472812)coherenceComponent).ids;

            var simFrame = ((_01ab9e945591dab4c9c7a936045b976c_2272714898920472812)coherenceComponent).idsSimulationFrame;
            
            return (value, simFrame);
        }

        public override ICoherenceComponentData WriteComponentData(ICoherenceComponentData coherenceComponent, AbsoluteSimulationFrame simFrame)
        {
            var update = (_01ab9e945591dab4c9c7a936045b976c_2272714898920472812)coherenceComponent;
            if (RuntimeInterpolationSettings.IsInterpolationNone)
            {
                update.ids = Value;
            }
            else
            {
                update.ids = GetInterpolatedAt(simFrame / InterpolationSettings.SimulationFramesPerSecond);
            }

            update.idsSimulationFrame = simFrame;
            
            return update;
        }

        public override ICoherenceComponentData CreateComponentData()
        {
            return new _01ab9e945591dab4c9c7a936045b976c_2272714898920472812();
        }    
    }

    [UnityEngine.Scripting.Preserve]
    public class CoherenceSync_01ab9e945591dab4c9c7a936045b976c : CoherenceSyncBaked
    {
        private Entity entityId;
        private Logger logger = Coherence.Log.Log.GetLogger<CoherenceSync_01ab9e945591dab4c9c7a936045b976c>();
        
        
        private InputBuffer<_01ab9e945591dab4c9c7a936045b976c> inputBuffer;
        private _01ab9e945591dab4c9c7a936045b976c currentInput;
        private long lastAddedFrame = -1;
        private CoherenceInput coherenceInput;
        private long currentSimulationFrame => coherenceInput.CurrentSimulationFrame;
        
        private IClient client;
        private CoherenceBridge bridge;
        
        private readonly Dictionary<string, Binding> bakedValueBindings = new Dictionary<string, Binding>()
        {
            ["afdd95ed2f444dd2b1be1ac8dfcbd925"] = new Binding_01ab9e945591dab4c9c7a936045b976c_afdd95ed2f444dd2b1be1ac8dfcbd925(),
            ["6393046b690e49918ab1c810c63f78b6"] = new Binding_01ab9e945591dab4c9c7a936045b976c_6393046b690e49918ab1c810c63f78b6(),
            ["d24f7942547649f0aafed1df15b2aca7"] = new Binding_01ab9e945591dab4c9c7a936045b976c_d24f7942547649f0aafed1df15b2aca7(),
            ["dc394eab71eb48f9a69fe44b8df69e2a"] = new Binding_01ab9e945591dab4c9c7a936045b976c_dc394eab71eb48f9a69fe44b8df69e2a(),
            ["722ce86ef3e7469dbd7e66130cc3e0d3"] = new Binding_01ab9e945591dab4c9c7a936045b976c_722ce86ef3e7469dbd7e66130cc3e0d3(),
            ["9e6de6cd0d8d43008ed392577ac75be5"] = new Binding_01ab9e945591dab4c9c7a936045b976c_9e6de6cd0d8d43008ed392577ac75be5(),
            ["85caa4b2a51c4a9bac671f1306cf2738"] = new Binding_01ab9e945591dab4c9c7a936045b976c_85caa4b2a51c4a9bac671f1306cf2738(),
            ["e2f04692a9f9469ab828cb063e9130f9"] = new Binding_01ab9e945591dab4c9c7a936045b976c_e2f04692a9f9469ab828cb063e9130f9(),
            ["099ed962adea4cf99b72d60281f876b8"] = new Binding_01ab9e945591dab4c9c7a936045b976c_099ed962adea4cf99b72d60281f876b8(),
        };
        
        private Dictionary<string, Action<CommandBinding, CommandsHandler>> bakedCommandBindings = new Dictionary<string, Action<CommandBinding, CommandsHandler>>();
        
        public CoherenceSync_01ab9e945591dab4c9c7a936045b976c()
        {
        }
        
        public override Binding BakeValueBinding(Binding valueBinding)
        {
            if (bakedValueBindings.TryGetValue(valueBinding.guid, out var bakedBinding))
            {
                valueBinding.CloneTo(bakedBinding);
                return bakedBinding;
            }
            
            return null;
        }
        
        public override void BakeCommandBinding(CommandBinding commandBinding, CommandsHandler commandsHandler)
        {
            if (bakedCommandBindings.TryGetValue(commandBinding.guid, out var commandBindingBaker))
            {
                commandBindingBaker.Invoke(commandBinding, commandsHandler);
            }
        }
        
        public override void ReceiveCommand(IEntityCommand command)
        {
            switch (command)
            {
                default:
                    logger.Warning($"CoherenceSync_01ab9e945591dab4c9c7a936045b976c Unhandled command: {command.GetType()}.");
                    break;
            }
        }
        
        public override List<ICoherenceComponentData> CreateEntity(bool usesLodsAtRuntime, string archetypeName, AbsoluteSimulationFrame simFrame)
        {
            if (!usesLodsAtRuntime)
            {
                return null;
            }
            
            if (Archetypes.IndexForName.TryGetValue(archetypeName, out int archetypeIndex))
            {
                var components = new List<ICoherenceComponentData>()
                {
                    new ArchetypeComponent
                    {
                        index = archetypeIndex,
                        indexSimulationFrame = simFrame,
                        FieldsMask = 0b1
                    }
                };

                return components;
            }
    
            logger.Warning($"Unable to find archetype {archetypeName} in dictionary. Please, bake manually (coherence > Bake)");
            
            return null;
        }
        
        public override void Dispose()
        {
            if (bridge != null)
            {
                bridge.OnLateFixedNetworkUpdate -= SendInputState;
            }
        }
        
        public override void Initialize(Entity entityId, CoherenceBridge bridge, IClient client, CoherenceInput input, Logger logger)
        {
            this.logger = logger.With<CoherenceSync_01ab9e945591dab4c9c7a936045b976c>();
            this.bridge = bridge;
            this.entityId = entityId;
            this.client = client;        
            coherenceInput = input;
            inputBuffer = new InputBuffer<_01ab9e945591dab4c9c7a936045b976c>(coherenceInput.InitialBufferSize, coherenceInput.InitialInputDelay, coherenceInput.UseFixedSimulationFrames);
            
            coherenceInput.internalSetButton = SetButton;
            coherenceInput.internalSetAxis = SetAxis;
            coherenceInput.internalSetAxis2D = SetAxis2D;
            coherenceInput.internalSetAxis3D = SetAxis3D;
            coherenceInput.internalSetRotation = SetRotation;
            coherenceInput.internalSetInteger = SetInteger;
            coherenceInput.internalSetString = SetString;
            coherenceInput.internalGetButton = GetButton;
            coherenceInput.internalGetAxis = GetAxis;
            coherenceInput.internalGetAxis2D = GetAxis2D;
            coherenceInput.internalGetAxis3D = GetAxis3D;
            coherenceInput.internalGetRotation = GetRotation;
            coherenceInput.internalGetInteger = GetInteger;
            coherenceInput.internalGetString = GetString;
            coherenceInput.internalRequestBuffer = () => inputBuffer;
            coherenceInput.internalOnInputReceived += OnInput;
            
            if (coherenceInput.UseFixedSimulationFrames)
            {
                bridge.OnLateFixedNetworkUpdate += SendInputState;
            }
        }

        private void SetButton(string name, bool value)
        {
            switch (name)
            {
                default:
                    logger.Error($"No input button of name: {name}.");
                    break;
            }
        }
        
        private void SetAxis(string name, float value)
        {
            switch (name)
            {
                default:
                    logger.Error($"No input axis of name: {name}.");
                    break;
            }
        }
        
        private void SetAxis2D(string name, Vector2 value)
        {
            switch (name)
            {
                default:
                    logger.Error($"No input axis2D of name: {name}.");
                    break;
            }
        }
        
        private void SetAxis3D(string name, Vector3 value)
        {
            switch (name)
            {
                default:
                    logger.Error($"No input axis3D of name: {name}.");
                    break;
            }
        }
        
        private void SetRotation(string name, Quaternion value)
        {
            switch (name)
            {
                default:
                    logger.Error($"No input rotation of name: {name}.");
                    break;
            }
        }
        
        private void SetInteger(string name, int value)
        {
            switch (name)
            {
                default:
                    logger.Error($"No input integer of name: {name}.");
                    break;
            }
        }
        
        private void SetString(string name, string value)
        {
            switch (name)
            {
                default:
                    logger.Error($"No input string of name: {name}.");
                    break;
            }
        }
        
        public override void SendInputState()
        {
            if (!coherenceInput.IsProducer || !coherenceInput.IsReadyToProcessInputs || !coherenceInput.IsInputOwner)
            {
                return;
            }

            if (lastAddedFrame != currentSimulationFrame)
            {
                inputBuffer.AddInput(currentInput, currentSimulationFrame);
                lastAddedFrame = currentSimulationFrame;
            }

            while (inputBuffer.DequeueForSending(currentSimulationFrame, out long frameToSend, out _01ab9e945591dab4c9c7a936045b976c input, out bool differs))
            {
                coherenceInput.DebugOnInputSent(frameToSend, input);
                client.SendInput(input, frameToSend, entityId);
            }
        }
        
        private bool ShouldPollCurrentInput(long frame)
        {
            return coherenceInput.IsProducer && coherenceInput.Delay == 0 && frame == currentSimulationFrame;
        }
        
        private bool GetButton(string name, long? simulationFrame)
        {
            long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);
            inputBuffer.TryGetInput(frame, out _01ab9e945591dab4c9c7a936045b976c input);
            
            switch (name)
            {
                default:
                    logger.Error($"No input button of name: .");
                    break;
            }
            
            return default;
        }
        
        private float GetAxis(string name, long? simulationFrame)
        {
            long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);
            inputBuffer.TryGetInput(frame, out _01ab9e945591dab4c9c7a936045b976c input);
            
            switch (name)
            {
                default:
                    logger.Error($"No input axis of name: .");
                    break;
            }
            
            return default;
        }
        
        private Vector2 GetAxis2D(string name, long? simulationFrame)
        {
            long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);
            inputBuffer.TryGetInput(frame, out _01ab9e945591dab4c9c7a936045b976c input);
            
            switch (name)
            {
                default:
                    logger.Error($"No input axis2D of name: .");
                    break;
            }
            
            return Vector2.zero;
        }
        
        private Vector3 GetAxis3D(string name, long? simulationFrame)
        {
            long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);
            inputBuffer.TryGetInput(frame, out _01ab9e945591dab4c9c7a936045b976c input);
            
            switch (name)
            {
                default:
                    logger.Error($"No input axis3D of name: .");
                    break;
            }
            
            return Vector3.zero;
        }
        
        private Quaternion GetRotation(string name, long? simulationFrame)
        {
            long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);
            inputBuffer.TryGetInput(frame, out _01ab9e945591dab4c9c7a936045b976c input);
            
            switch (name)
            {
                default:
                    logger.Error($"No input rotation of name: .");
                    break;
            }
            
            return Quaternion.identity;
        }
        
        private int GetInteger(string name, long? simulationFrame)
        {
            long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);
            inputBuffer.TryGetInput(frame, out _01ab9e945591dab4c9c7a936045b976c input);
            
            switch (name)
            {
                default:
                    logger.Error($"No input integer of name: .");
                    break;
            }
            
            return 0;
        }
        
        private string GetString(string name, long? simulationFrame)
        {
            long frame = simulationFrame.GetValueOrDefault(currentSimulationFrame);
            inputBuffer.TryGetInput(frame, out _01ab9e945591dab4c9c7a936045b976c input);
            
            switch (name)
            {
                default:
                    logger.Error($"No input integer of name: .");
                    break;
            }
            
            return null;
        }
        
        private void OnInput(IEntityInput entityInput, long frame)
        {
            var input = (_01ab9e945591dab4c9c7a936045b976c)entityInput;
            coherenceInput.DebugOnInputReceived(frame, entityInput);
            inputBuffer.ReceiveInput(input, frame);
        }
    }

}