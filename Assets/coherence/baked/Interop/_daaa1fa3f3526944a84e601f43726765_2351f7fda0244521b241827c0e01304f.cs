// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using UnityEngine;

    public struct _daaa1fa3f3526944a84e601f43726765_2351f7fda0244521b241827c0e01304f : IEntityCommand
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 rigidbodyIndex;
            [FieldOffset(4)]
            public Vector3 localPos;
            [FieldOffset(16)]
            public Vector3 worldImpulse;
            [FieldOffset(28)]
            public System.Int32 numFrames;
        }

        public static unsafe _daaa1fa3f3526944a84e601f43726765_2351f7fda0244521b241827c0e01304f FromInterop(System.IntPtr data, System.Int32 dataSize) 
        {
            if (dataSize != 32) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 32) " +
                    "for command with ID 7");
            }

            var orig = new _daaa1fa3f3526944a84e601f43726765_2351f7fda0244521b241827c0e01304f();
            var comp = (Interop*)data;
            orig.rigidbodyIndex = comp->rigidbodyIndex;
            orig.localPos = comp->localPos;
            orig.worldImpulse = comp->worldImpulse;
            orig.numFrames = comp->numFrames;
            return orig;
        }

        public System.Int32 rigidbodyIndex;
        public Vector3 localPos;
        public Vector3 worldImpulse;
        public System.Int32 numFrames;
        
        public Entity Entity { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public uint GetComponentType() => 7;
        
        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }
        
        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() {
            return default;
        }

        public void NullEntityRefs(Entity entity) {
        }
        
        public _daaa1fa3f3526944a84e601f43726765_2351f7fda0244521b241827c0e01304f(
        Entity entity,
        System.Int32 rigidbodyIndex,
        Vector3 localPos,
        Vector3 worldImpulse,
        System.Int32 numFrames
)
        {
            Entity = entity;
            Routing = MessageTarget.All;
            Sender = 0;
            
            this.rigidbodyIndex = rigidbodyIndex; 
            this.localPos = localPos; 
            this.worldImpulse = worldImpulse; 
            this.numFrames = numFrames; 
        }
        
        public static void Serialize(_daaa1fa3f3526944a84e601f43726765_2351f7fda0244521b241827c0e01304f commandData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteIntegerRange(commandData.rigidbodyIndex, 32, -2147483648);
            var converted_localPos = commandData.localPos.ToCoreVector3();
            bitStream.WriteVector3(converted_localPos, FloatMeta.NoCompression());
            var converted_worldImpulse = commandData.worldImpulse.ToCoreVector3();
            bitStream.WriteVector3(converted_worldImpulse, FloatMeta.NoCompression());
            bitStream.WriteIntegerRange(commandData.numFrames, 32, -2147483648);
        }
        
        public static _daaa1fa3f3526944a84e601f43726765_2351f7fda0244521b241827c0e01304f Deserialize(IInProtocolBitStream bitStream, Entity entity, MessageTarget target)
        {
            var datarigidbodyIndex = bitStream.ReadIntegerRange(32, -2147483648);
            var converted_localPos = bitStream.ReadVector3(FloatMeta.NoCompression());
            var datalocalPos = converted_localPos.ToUnityVector3();
            var converted_worldImpulse = bitStream.ReadVector3(FloatMeta.NoCompression());
            var dataworldImpulse = converted_worldImpulse.ToUnityVector3();
            var datanumFrames = bitStream.ReadIntegerRange(32, -2147483648);
    
            return new _daaa1fa3f3526944a84e601f43726765_2351f7fda0244521b241827c0e01304f()
            {
                Entity = entity,
                Routing = target,
                rigidbodyIndex = datarigidbodyIndex,
                localPos = datalocalPos,
                worldImpulse = dataworldImpulse,
                numFrames = datanumFrames
            };   
        }
    }

}