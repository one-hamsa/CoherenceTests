// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using System;
    using UnityEngine;

    public struct _3bec13d4bb00a5e479d1a130c95272ee : IEntityInput, IEquatable<_3bec13d4bb00a5e479d1a130c95272ee>
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
        }

        public static unsafe _3bec13d4bb00a5e479d1a130c95272ee FromInterop(System.IntPtr data, System.Int32 dataSize)
        {
            if (dataSize != 0) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 0) " +
                    "for input with ID 1");
            }

            var orig = new _3bec13d4bb00a5e479d1a130c95272ee();
            var comp = (Interop*)data;
            return orig;
        }

        public uint GetComponentType() => 1;

        public Entity Entity { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public long Frame { get; set; }
        private bool isRemoteInput;


        public _3bec13d4bb00a5e479d1a130c95272ee(
        Entity entity,
        long frame,
        bool isRemoteInput)
        {
            this.Entity = entity;
            this.Routing = MessageTarget.All;
            this.Sender = 0;
            this.Frame = frame;
            this.isRemoteInput = isRemoteInput;
        }

        public override string ToString()
        {
            return $"Entity: {Entity}, Frame: {Frame}, Inputs: []";
        }

        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }

        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() => default;

        public void NullEntityRefs(Entity entity) { }

        public bool Equals(_3bec13d4bb00a5e479d1a130c95272ee other)
        {
            return true;
        }

        public static void Serialize(_3bec13d4bb00a5e479d1a130c95272ee inputData, IOutProtocolBitStream bitStream)
        {
        }

        public static _3bec13d4bb00a5e479d1a130c95272ee Deserialize(IInProtocolBitStream bitStream, Entity entity, long frame)
        {

            return new _3bec13d4bb00a5e479d1a130c95272ee()
            {
                Entity = entity,
                Frame = frame,
                isRemoteInput = true
            };
        }
    }


}